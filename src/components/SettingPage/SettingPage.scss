@use '../../styles/variables' as v;

$breakpoints: (
  mobile: '(max-width: 424px)',
  tablet: '(min-width:425px) and (max-width: 1023px)',
  desktop: '(min-width: 1024px)',
  tablet_mini: '(min-width:425px)',
);

@mixin media($device) {
  @media only screen and #{map-get($breakpoints, $device)} {
    @content;
  }
}

.settingPage {
  background-color: v.$textColor-colorWhite;
  width: 100%;
  height: 86vh;
  padding: 2rem;

  &_notifDiv {
    width: 90%;
    margin: auto;
    text-align: center;
    padding: 0.5rem;
    border-radius: 5px;
    background: rgba( 255, 255, 255, 0.3 );
    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );
    backdrop-filter: blur( 5.5px );
    -webkit-backdrop-filter: blur( 5.5px );
    border: 1px solid rgba( 255, 255, 255, 0.18 );

    &_title {
      padding-bottom: 0.5rem;
    }

    &_checkbox-wrapper {
      box-sizing: border-box;
      --background-color: #fff;
      --checkbox-height: 25px;
      display: flex;
      justify-content: center;
      gap: 1rem;

      &_label {
      }

      &_input {
        display: none;
        height: var(--checkbox-height);
        width: var(--checkbox-height);
        background-color: transparent;
        border: calc(var(--checkbox-height) * .1) solid #000;
        border-radius: 5px;
        position: relative;
        display: inline-block;
        box-sizing: border-box;
        transition: border-color ease 0.2s;
        cursor: pointer;

        &::before,
        &::after {
          box-sizing: border-box;
          position: absolute;
          height: 0;
          width: calc(var(--checkbox-height) * .2);
          background-color: #34b93d;
          display: inline-block;
          transform-origin: left top;
          border-radius: 5px;
          content: " ";
          transition: opacity ease 0.5;
        }

        &::before {
          top: calc(var(--checkbox-height) * .72);
          left: calc(var(--checkbox-height) * .41);
          box-shadow: 0 0 0 calc(var(--checkbox-height) * .05) var(--background-color);
          transform: rotate(-135deg);
        }

        &::after {
          top: calc(var(--checkbox-height) * .37);
          left: calc(var(--checkbox-height) * .05);
          transform: rotate(-45deg);
        }

        &:checked + &_label {
          border-color: #34b93d;

          &::after {
            height: calc(var(--checkbox-height) / 2);
            animation: dothabottomcheck 0.2s ease 0s forwards;
          }

          &::before {
            height: calc(var(--checkbox-height) * 1.2);
            animation: dothatopcheck 0.4s ease 0s forwards;
          }
        }
      }
    }
  }

  &_restrictionDiv {
    width: 90%;
    margin: 1rem auto;
    text-align: center;
    padding: 0.5rem;
    border-radius: 5px;
    background: rgba( 255, 255, 255, 0.3 );
    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );
    backdrop-filter: blur( 5.5px );
    -webkit-backdrop-filter: blur( 5.5px );
    border: 1px solid rgba( 255, 255, 255, 0.18 );

    &_subtitle {
      font-size: 1rem;
      font-weight: 300;
      font-style: italic;
      color: v.$textColor-colorGray;
    }
  }

  @keyframes dothabottomcheck {
    0% {
      height: 0;
    }
    100% {
      height: calc(var(--checkbox-height) / 2);
    }
  }

  @keyframes dothatopcheck {
    0% {
      height: 0;
    }
    50% {
      height: 0;
    }
    100% {
      height: calc(var(--checkbox-height) * 1.2);
    }
  }
}
